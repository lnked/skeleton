var app = app || {};

(function(body){
    "use strict";

    app = {
        
        init: function() {
            this.map.init();
            this.faq.init();
            this.faq.morph();
            this.fixmenu.init();
        }

    };

})(document.body);

// cookie.set({
//    key1: 'value1',
//    key2: 'value2'
// });

// cookie.set('key', 'value', {
//    expires: 7, // expires in one week
// });

// cookie.set({
//    key1: 'value1',
//    key2: 'value2'
// }, {
//    expires: 7
// })

// cookie.defaults.expires = 7;
// cookie.defaults.secure = true;


// cookie.expiresMultiplier = 60; // Seconds.
// cookie.expiresMultiplier = 60 * 60; // Minutes.
// cookie.expiresMultiplier = 60 * 60 * 24; // Hours.


// cookie.get('key');

// cookie.get(['key1', 'key2']);

// cookie.get('key', 'default value');
// cookie.get(['key1', 'key2'], 'default value');


// cookie.get('key');
// // is the same as
// cookie('key');

// var cookies = cookie.all();

// cookie.remove('key');
// cookie.remove('key1', 'key2');
// cookie.remove(['key1', 'key2']);

// if (cookie.enabled()) {
//    // Do stuff with cookies
// } else {
//    // Display error message or use localStorage
// }


// cookie.set('a', '1');
// cookie.setDefault({
//    a: '2',
//    b: '2'
// });

// cookie.get(['a', 'b']); // {a: "1", b: "2"}

// cookie.set('a', 'b', { path: '/somepath' });

// // This won't work
// cookie.remove('a');

// // You have to do this
// cookie.removeSpecific('a', { path: '/somepath' });

// // You can also give an array of cookie keys
// cookie.removeSpecific(['a', 'b'], { path: '/somepath' });

// cookie.empty().set('key1', 'value1').set('key2', 'value2').remove('key1');

// cookie.utils.decode = function (value) {
//    return decodeURIComponent(value).replace('+', ' ');
// };

var app = app || {};

(function(body){
    "use strict";

    var $body = $(body),
        _this;

    app.ajaxForm = {

        config: {
            form_class: '.form-ajax',
            form_reset: 'form-reset',
            link_class: '.js-request-link',
            error_class: 'error',
            error_message: 'form__error-message',
            error_message_class: 'j-error-message',
            error_message_addclass: 'show',
            form_label: '.form__wrapper',
            checkbox_label: 'checkbox__label'
        },

        callback_stack: {},

        extend: function(config)
        {
            _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        default_handler: function(form, response)
        {
            _this = this;

            if (response.status)
            {
                if (response.hasOwnProperty('redirect_url'))
                {
                    window.location.href = response.redirect_url;
                }
            }
            else if (typeof response.errors !== 'undefined' || typeof response.error_message !== 'undefined')
            {
                var errors, error_message;

                if (typeof response.errors !== 'undefined')
                {
                    errors = response.errors;
                }

                if (typeof response.error_message !== 'undefined')
                {
                    error_message = response.error_message;
                }

                _this.validation(form, errors, response.error_message);
            }

            if (response.hasOwnProperty('open_popup'))
            {
                if ($('body').find('.popup.is-open').length)
                {
                    $.popup.close($('body').find('.popup.is-open'), function(){
                        $.popup.open(response.open_popup);
                    });
                }
                else
                {
                    $.popup.open(response.open_popup);
                }
            }

            if (response.hasOwnProperty('message'))
            {
                $.popup.message(response.title, response.message);
            }

        },

        validation: function(form, errors, error_message)
        {
            _this = this;

            form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
            form.find('.' + _this.config.error_message).remove();
            form.find('.' + _this.config.error_message_class).removeClass(_this.config.error_message_addclass);

            var fieldName, field;

            setTimeout(function() {
                if (typeof error_message !== 'undefined' && error_message !== '')
                {
                    form.find('.' + _this.config.error_message_class).html(error_message);
                    form.find('.' + _this.config.error_message_class).addClass(_this.config.error_message_addclass);
                }

                if (typeof errors !== 'undefined' && errors !== '')
                {
                    for(fieldName in errors)
                    {
                        if (form.find('input[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('input[name="'+fieldName+'"]');
                        }

                        if (form.find('select[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('select[name="'+fieldName+'"]');
                        }

                        if (form.find('textarea[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('textarea[name="'+fieldName+'"]');
                        }

                        if (field.closest('.' + _this.config.checkbox_label).length > 0)
                        {
                            field = field.closest('.' + _this.config.checkbox_label);
                        }

                        if (typeof field !== 'undefined')
                        {
                            field.addClass(_this.config.error_class);
                            field.closest(_this.config.form_label).append('<div class="' + _this.config.error_message + '">' + errors[fieldName] + '</div>');
                        }
                    }
                }
            }, 10);
        },

        upload: function()
        {
            _this = this;

            $body.on('submit', '.form-file-upload', function(e) {
                return AIM.submit(this, {
                    onStart: function()
                    {

                    },
                    onComplete: function(result)
                    {
                        if (typeof result === 'object' && result.status === true && result.hasOwnProperty('photo_url'))
                        {

                        }
                    }
                });
            });

            $(document).on('change', '.upload_button_onchange', function(){
                if ($(this).closest('.upload_button').find('.upload_button_field').length > 0)
                {
                    $(this).closest('.upload_button').find('.upload_button_field').html($(this).val());
                }
            });
        },

        send: function(action, method, data, cb, err)
        {

            if (typeof cb !== 'function') {
                cb = function() {};
            }

            if (typeof err !== 'function') {
                err = function() {};
            }

            try {

                $.ajaxSetup({
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    }
                });

                $.ajax({
                    url: action,
                    type: method,
                    data: data,
                    contentType: false,
                    processData: method.toLowerCase() == 'get',
                    success: cb,
                    error: err,
                    dataType: 'JSON'
                });

            } catch(e){}

        },

        initLink: function()
        {
            _this = this;

            $body.on('click', _this.config.link_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var link = $(this);

                if (link.data('is-busy')) {
                    return;
                }

                link.data('is-busy', true);

                var action = ($(this).attr('href')) || $(this).data('action'),
                    method = ($(this).data('method')) || 'get',
                    data = {};

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (link.data('callback') && _this.callback_stack.hasOwnProperty(link.data('callback')))
                        {
                            _this.callback_stack[link.data('callback')](link, response);
                        }
                        else
                        {
                            _this.default_handler(link, response);
                        }

                        if (response.status === true)
                        {

                        }

                        link.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(link, response);
                        link.data('is-busy', false);
                    }
                );
            });
        },

        initForm: function()
        {
            _this = this;

            $body.on('submit', _this.config.form_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var form    = $(this),
                    action  = form.attr('action'),
                    method  = (form.attr('method') || 'post'),
                    data    = !!window.FormData ? new FormData(form[0]) : form.serialize();

                if (form.data('is-busy')) {
                    return;
                }

                form.data('is-busy', true);

                if (typeof button !== 'undefined')
                {
                    if (button.data('loading'))
                    {
                        button.data('original', button.text());
                        button.text(button.data('loading'));
                    }

                    button.addClass('preload');
                }

                if (form.data('precallback') && _this.callback_stack.hasOwnProperty(form.data('precallback'))) {
                    if(!_this.callback_stack[form.data('precallback')](form))
                    {
                        return false;
                    }
                }

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (form.data('callback') && _this.callback_stack.hasOwnProperty(form.data('callback')))
                        {
                            _this.callback_stack[form.data('callback')](form, response);
                        }
                        else
                        {
                            _this.default_handler(form, response);
                        }

                        if (response.status === true)
                        {
                            if (form.hasClass(_this.config.form_reset))
                            {
                                form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
                                form.get(0).reset();
                            }
                        }

                        if (typeof button !== 'undefined')
                        {
                            if (button.data('original'))
                            {
                                button.text(button.data('original'));
                            }

                            button.removeClass('preload');
                        }

                        form.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(form, response);
                        form.data('is-busy', false);
                    }
                );
            });
        },

        init: function(config)
        {
            this.extend(config);

            this.initForm();
            this.initLink();
        }
    };

    app.ajaxForm.init();

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.carousel = {

        init: function() {
            if ($('.j-carousel').length && $('.j-carousel').find('.slick-slide').length)
            {
                var count = 4, classname = 'carousel';

                $('.j-carousel').each(function(){
                    count = 4;
                    classname = 'carousel';

                    if ($(this).data('viewcount'))
                    {
                        count = parseInt($(this).data('viewcount'));
                    }

                    if ($(this).data('classname'))
                    {
                        classname = $(this).data('classname');
                    }

                    $(this).slick({
                        infinite: true,
                        dots: false,
                        draggable: true,
                        speed: 170,
                        slidesToShow: count,
                        slidesToScroll: 1,
                        prevArrow: '<button type="button" class="'+classname+'__navigation '+classname+'__navigation_prev slick-prev"></button>',
                        nextArrow: '<button type="button" class="'+classname+'__navigation '+classname+'__navigation_next slick-next"></button>',
                        responsive: [
                            {
                                breakpoint: 1024,
                                settings: {
                                    slidesToShow: 3,
                                    slidesToScroll: 3,
                                    infinite: true,
                                    dots: true
                                }
                            },
                            {
                                breakpoint: 600,
                                settings: {
                                    slidesToShow: 2,
                                    slidesToScroll: 2
                                }
                            },
                            {
                                breakpoint: 480,
                                settings: {
                                    slidesToShow: 1,
                                    slidesToScroll: 1
                                }
                            }
                        ]
                    });
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.faq = {

        init: function() {
            $('body').on('click', '.j-faq-trigger', function(e){
                e.preventDefault();

                var $faq = $(this).closest('.j-faq');
                $faq.toggleClass('_open');

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.fixmenu = {
        
        fixMenu: function($menu, t) {

            if (t >= (159)) {
                if (!$menu.hasClass('_sticked')) {
                    $menu.addClass('_sticked');
                }
            }
            else {
                if ($menu.hasClass('_sticked')) {
                    $menu.removeClass('_sticked');
                }
            }
            
        },

        init: function() {
            var $element = $('#navigation'),
                that = this;

            that.fixMenu($element, $(window).scrollTop());

            $(window).on('scroll', function(){
                that.fixMenu($element, $(window).scrollTop());
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.gallery = {

        init: function() {

            if ($('.j-gallery').length) {
                $('.j-gallery').each(function(){
                    $(this).magnificPopup({
                        type: 'image',
                        delegate: 'a.zoom',
                        removalDelay: 500,
                        fixedContentPos: false,
                        closeOnBgClick: true,
                        gallery: {
                            enabled: true
                        },
                        callbacks: {
                             open: function() {
                                $('body').addClass('noscroll');
                             },
                             close: function() {
                                 $('body').removeClass('noscroll');
                             }
                        }
                    });
                });

                $('.popup-youtube, .popup-vimeo, .popup-gmaps').magnificPopup({
                    disableOn: 700,
                    type: 'iframe',
                    mainClass: 'mfp-fade',
                    removalDelay: 160,
                    preloader: false,
                    fixedContentPos: false
                });
            }
            
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.map = {
        
        _mapObject: null,

        _geoObject: null,

        getData: function($element) {
            var x, wrap_id = null, coords = null;

            if ($element.data('coords')) {
                coords = $element.data('coords').split(',');

                for (x in coords) {
                    coords[x] = $.trim(coords[x]);
                }

                if (coords.length !== 2) {
                    coords = null;
                }
            }

            if ($element.attr('id')) {
                wrap_id = $element.attr('id');
            }

            return {
                id: wrap_id,
                coords: coords
            }
        },

        drowMap: function($element) {
            
            var that = this, data = this.getData($element);

            ymaps.ready(function(){

                that._mapObject = new ymaps.Map(data.id, {
                    center: [data.coords[0], data.coords[1]],
                    zoom: 13,
                    controls: ['zoomControl', 'searchControl', 'typeSelector', 'fullscreenControl']
                });

                // "fullscreenControl" - кнопка разворачивания карты на весь экран control.FullscreenControl;
                // "geolocationControl" - кнопка определения местоположения пользователя control.GeolocationControl;
                // "routeEditor" - кнопка включения и отключения поведения "редактор маршрута" control.RouteEditor;
                // "rulerControl" - кнопка включения и отключения поведения "линейка" control.RulerControl;
                // "searchControl" - панель поиска control.SearchControl;
                // "trafficControl" - панель пробок control.TrafficControl;
                // "typeSelector" - панель переключения типа карты control.TypeSelector;
                // "zoomControl" - ползунок масштаба control.ZoomControl;
                // "smallMapDefaultSet" - базовый набор элементов управления, оптимизированный для карт небольшого размера и экранов телефонов. Состоит из элементов управления "zoomControl", "searchControl", "typeSelector", "geolocationControl" и "fullscreenControl". В этом наборе все элементы управления минимизированы до кнопок с пиктограммами.
                // "mediumMapDefaultSet" - набор элементов управления, оптимизированный для карт среднего размера и экранов планшетов. Помимо базового набора элементов управления (см. выше), добавляет дополнительно элементы управления "rulerControl" и "trafficControl".
                // "largeMapDefaultSet" - набор элементов управления, оптимизированный для карт большого размера и экранов десктопных компьютеров. Отличается от набора "mediumMapDefaultSet" наличием элемента управления "routeEditor" и отсутствием элемента управления "fullScreen";
                // "default" - набор элементов управления по умолчанию; синоним для набора "mediumMapDefaultSet".

                that._mapObject.behaviors.disable('scrollZoom');

                that._mapObject.controls.get('zoomControl').options.set('size', 'small');
                that._mapObject.controls.get('zoomControl').options.set('position', { right: 10, top: 50 });

                that._mapObject.geoObjects
                    .add(new ymaps.Placemark([data.coords[0], data.coords[1]], {}, {
                        preset: 'islands#dotIcon',
                        iconColor: '#735184'
                    }))

            });

        },

        init: function() {
            var that = this;

            if ($('.j-map').length) {
                $('.j-map').each(function(){
                    that.drowMap($(this));
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.morph = {

        init: function() {
            function morphDropdown( element ) {
                this.element = element;
                this.mainNavigation = this.element.find('.main-nav');
                this.mainNavigationItems = this.mainNavigation.find('.has-dropdown');
                this.dropdownList = this.element.find('.dropdown-list');
                //...
                
                this.bindEvents();
            }

            morphDropdown.prototype.bindEvents = function() {
                var self = this;
                
                this.mainNavigationItems.mouseenter(function(event){
                    //hover over one of the nav items -> show dropdown
                    self.showDropdown($(this));
                }).mouseleave(function(){
                    //if not hovering over a nav item or a dropdown -> hide dropdown
                    if( self.mainNavigation.find('.has-dropdown:hover').length == 0 && self.element.find('.dropdown-list:hover').length == 0 ) self.hideDropdown();
                });
            };

            morphDropdown.prototype.showDropdown = function(item) {
                var selectedDropdown = this.dropdownList.find('#'+item.data('content')),
                    selectedDropdownHeight = selectedDropdown.innerHeight(),
                    selectedDropdownWidth = selectedDropdown.children('.content').innerWidth(),
                    selectedDropdownLeft = item.offset().left + item.innerWidth()/2 - selectedDropdownWidth/2;
             
                //update dropdown and dropdown background position and size
                this.updateDropdown(selectedDropdown, parseInt(selectedDropdownHeight), selectedDropdownWidth, parseInt(selectedDropdownLeft));
                
                //add the .active class to the selected .dropdown and .is-dropdown-visible to the .cd-morph-dropdown 
                //...
            };
             
            morphDropdown.prototype.updateDropdown = function(dropdownItem, height, width, left) {
                this.dropdownList.css({
                    '-moz-transform': 'translateX(' + left + 'px)',
                    '-webkit-transform': 'translateX(' + left + 'px)',
                    '-ms-transform': 'translateX(' + left + 'px)',
                    '-o-transform': 'translateX(' + left + 'px)',
                    'transform': 'translateX(' + left + 'px)',
                    'width': width+'px',
                    'height': height+'px'
                });
             
                this.dropdownBg.css({
                    '-moz-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    '-webkit-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    '-ms-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    '-o-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    'transform': 'scaleX(' + width + ') scaleY(' + height + ')'
                });
            };

        }

    };

})(document.body);
(function($) {
    "use strict";

    var that, top, changeItem, scrollToAnchor, $target, $element, $current, $navigationMap, $navigation = $('#navigation'), $hasScroll = $('html, body');
    var is_mobile = $(window).width() <= 667;

    $navigationMap = $('.j-section').map(function(){
        return {
            offset: $(this).offset().top,
            element: $(this)
        }
    });

    changeItem = function(scrollTop) {
        $element = null;

        $navigationMap.map(function(){
            that = $(this)[0];
            if (that.offset < scrollTop) {
                $element = that.element; 
            }
        })

        if ($element !== null && $element.data('screen')) {
            $current = $navigation.find('.j-navigation[href="#' + $element.data('screen') + '"]');

            if (!$current.hasClass('_current')) {
                $navigation.find('.j-navigation._current').removeClass('_current');
                $current.addClass('_current');
            }
        }
    }

    scrollToAnchor = function(hash, animate) {
        $target = $(hash + '-anchor');

        if ($target.length)
        {
            is_mobile = $(window).width() <= 667;
            top = $target.offset().top;

            if (is_mobile) {
                top = top - 100
            }

            if (animate) {
                $hasScroll.stop().animate({ 'scrollTop': top }, 'medium', 'easeInOutCirc');
            }
            else {
                $hasScroll.scrollTop(top);
            }
        }
    }

    $('.j-navigation').on('click', function(e) {
        scrollToAnchor(this.hash, true);
    });

    setTimeout(function(){
        if (window.location.hash.length > 1) {
            scrollToAnchor(window.location.hash, false);
        }
    }, 150);

    $(window).scroll(function(){
        changeItem($(window).scrollTop())
    });
})(jQuery);
var app = app || {};

(function(body){
    "use strict";

    app.quantity = {

        config: {
            element: '.j-quantity',
            count: '.j-quantity-count',
            control: '.j-quantity-control'
        },

        init: function()
        {
            var _this = this, value = 0, max = 100, $element = '', method = '';

            $('body').on('click', _this.config.control, function(e) {
                e.preventDefault();

                $element = $(this).closest(_this.config.element);

                method = $(this).data('method');

                max = $element.find(_this.config.count).data('max');
                value = parseInt($element.find(_this.config.count).val());

                switch(method) {
                    case 'increase':
                        value += 1;
                    break;

                    case 'decrease':
                        if (value > 1) {
                            value -= 1;
                        }
                    break;
                }

                if (value > max) {
                    value = max;
                }
                
                $element.find(_this.config.count).val(value);

                return !1;
            });
        }

    };

})(document.body);

// <div class="quantity j-quantity clearfix">
//     <b data-element="{$product.current.id}" class="quantity__control _decrease j-quantity-control" data-method="decrease">
//         <i class="ico ico_decrease">-</i>
//     </b>
    
//     <input name="count[{$product.current.id}]" class="quantity__count j-quantity-count" data-product="{$product.cart_count}" value="{$product.current.id}" maxlength="4" data-max="9999">
    
//     <b data-element="{$product.current.id}" class="quantity__control _increase j-quantity-control" data-method="increase">
//         <i class="ico ico_increase">+</i>
//     </b>
// </div>
var app = app || {};

;(function(body){
    "use strict";

    var _this;

    app.sandwich = {

        config: {
            keyHooks: !1,
            selector: '.js-sandwich-menu',
            wrapper: '.layout-wrapper',
            overlay: '.overlay'
        },

        extend: function(config)
        {
            _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        isOpen: function()
        {
            return $('body').hasClass('page-visible');
        },

        hide: function()
        {
            $('body').removeClass('page-open');

            setTimeout(function(){
                $('body').removeClass('page-visible');
            }, 10);

            $(this.config.overlay).css({
                'visibility': 'hidden'
            });
        },

        toggle: function()
        {
            if ($('body').hasClass('page-visible'))
            {
                $('body').removeClass('page-open');

                setTimeout(function(){
                    $('body').removeClass('page-visible');
                }, 200);
            }
            else
            {
                $('body').addClass('page-open');

                setTimeout(function(){
                    $('body').addClass('page-visible');
                }, 10);
            }

            var visibility = 'visible';

            if (!$('body').hasClass('page-open'))
            {
                visibility = 'hidden'
            }
            
            $(_this.config.overlay).css({
                'visibility': visibility
            });
        },

        sandwichTrigger: function()
        {
            _this = this;

            if (_this.config.keyHooks)
            {
                $('body').on('keydown', function(e) {
                    if(e.keyCode == 27 && _this.isOpen())
                    {
                        _this.toggle();
                    }
                });
            };

            $('body').on('click', _this.config.selector, function(e){
                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                _this.toggle();
            });
        },

        overlayTrigger: function()
        {
            _this = this;

            $('body').on('click', _this.config.overlay, function(e){
                _this.hide();
            });
        },

        init: function(config)
        {
            this.extend(config);
            this.sandwichTrigger();
            this.overlayTrigger();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.slider = {

        init: function() {
            if ($('.j-slider').length && $('.j-slider').find('.slick-slide').length)
            {
                var count = 1, classname = 'slider', prefix = 'slider', $slider = '', width = $(window).width(), options = {};

                $('.j-slider').each(function(){
                    count = 1;
                    classname = 'slider';

                    if ($(this).data('prefix')) {
                        prefix = $(this).data('prefix');
                    }

                    options = {
                        fade: true,
                        dots: true,
                        speed: 500,
                        infinite: true,
                        autoplay: false,
                        draggable: false,
                        autoplaySpeed: 6500,
                        pauseOnHover: false,
                        useTransform: false,
                        variableWidth: false,
                        cssEase: 'linear',
                        responsive: [
                            {
                                breakpoint: 950,
                                settings: {
                                    dots: false,
                                    autoplay: true,
                                    draggable: true
                                }
                            }
                        ]
                    };
                    
                    $slider = $(this);

                    if ($slider.data('viewcount'))
                    {
                        count = parseInt($slider.data('viewcount'));
                    }

                    $slider.on('beforeChange', function(event, slick, currentSlide, nextSlide){
                        console.log(currentSlide, nextSlide);
                        
                        var $current = $(slick.$slides[currentSlide]);
                        var $next = $(slick.$slides[nextSlide]);
                        // $next.find('.j-after-slide').removeClass('is-show is-animate');
                    });

                    $slider.on('afterChange', function(event, slick, currentSlide){
                        var $current = $(slick.$slides[currentSlide]);
                        $current.find('.j-after-slide').addClass('is-show');
                        
                        setTimeout(function(){
                            $current.find('.j-after-slide').addClass('is-animate');
                        }, 10);
                    });

                    if ($slider.hasClass('j-slider-calc'))
                    {
                        $slider.find('.slick-slide').css({
                            'width': width + 'px'
                        });
                    }

                    if ($slider.data('classname'))
                    {
                        classname = $slider.data('classname');
                    }
                    
                    if (!$slider.hasClass('j-disable-navigation'))
                    {
                        options['prevArrow'] = '<button type="button" class="' + prefix + '__nav _prev slick-prev"></button>';
                        options['nextArrow'] = '<button type="button" class="' + prefix + '__nav _next slick-next"></button>';
                    }
                    else
                    {
                        options['arrows'] = false;
                    }

                    $slider.slick(options);
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.tabs = {

        init: function() {
            var $wrapper = null, tab = '';

            $('body').on('click', '.j-tab-trigger', function(e){
                e.preventDefault();

                if (!$(this).hasClass('_open')) {
                    tab = $(this).data('tab');

                    $wrapper = $(this).closest('.j-tab-wrapper');

                    $wrapper.find('.j-tab-trigger').removeClass('_current');
                    $wrapper.find('.j-tab-item').removeClass('_open');

                    $wrapper.find('#tab-'+tab).addClass('_open');
                    $(this).addClass('_current');
                }

                return !1;
            });
        }

    };

})(document.body);
"use strict";

function sprintf(v) {
  var split = v.toString().split('.'), pad = "00", time = [], x = null;

  for (x in split) {
    time.push(pad.substring(0, 2 - split[x].toString().length) + split[x]);
  }

  return time.join('.');
}

var load = (function() {
  // Function which returns a function: https://davidwalsh.name/javascript-functions
  function _load(tag) {
    return function(url) {
      // This promise will be used by Promise.all to determine success or failure
      return new Promise(function(resolve, reject) {
        var element = document.createElement(tag);
        var parent = 'body';
        var attr = 'src';

        // Important success and error for the promise
        element.onload = function() {
          resolve(url);
        };
        element.onerror = function() {
          reject(url);
        };

        // Need to set different attributes depending on tag type
        switch(tag) {
          case 'script':
            element.async = true;
            break;
          case 'link':
            element.type = 'text/css';
            element.rel = 'stylesheet';
            attr = 'href';
            parent = 'head';
        }

        // Inject into document to kick off loading
        element[attr] = url;
        document[parent].appendChild(element);
      });
    };
  }
  
  return {
    css: _load('link'),
    js: _load('script'),
    img: _load('img')
  }
})();

// Usage:  Load different file types with one callback
Promise.all([
    load.js('lib/highlighter.js'), 
    load.js('lib/main.js'), 
    load.css('lib/highlighter.css'),
    load.img('images/logo.png')
  ]).then(function() {
    console.log('Everything has loaded!');
  }).catch(function() {
    console.log('Oh no, epic failure!');
  });

$(window).load(function(){
    if(window.jQueryReadyHandlers) { 
        $.each(window.jQueryReadyHandlers, function(index,func){  
            $(func);
        });
    }
});

$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
